import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_each_argument, a as validate_slots, e as element, b as space, t as text, c as claim_element, f as children, g as claim_space, h as claim_text, j as detach_dev, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, o as empty, q as query_selector_all, p as noop, r as destroy_each } from './client.9537c66b.js';

/* src/routes/index.svelte generated by Svelte v3.23.2 */

const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (29:0) {#each photos as src}
function create_each_block(ctx) {
	let div;
	let figure;
	let img;
	let img_src_value;
	let t0;
	let figcaption;
	let a;
	let t1;
	let a_href_value;
	let t2;
	let div_id_value;

	const block = {
		c: function create() {
			div = element("div");
			figure = element("figure");
			img = element("img");
			t0 = space();
			figcaption = element("figcaption");
			a = element("a");
			t1 = text("...");
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, id: true });
			var div_nodes = children(div);
			figure = claim_element(div_nodes, "FIGURE", {});
			var figure_nodes = children(figure);
			img = claim_element(figure_nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(figure_nodes);
			figcaption = claim_element(figure_nodes, "FIGCAPTION", {});
			var figcaption_nodes = children(figcaption);
			a = claim_element(figcaption_nodes, "A", { href: true });
			var a_nodes = children(a);
			t1 = claim_text(a_nodes, "...");
			a_nodes.forEach(detach_dev);
			figcaption_nodes.forEach(detach_dev);
			figure_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*src*/ ctx[3])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "a blue sky");
			attr_dev(img, "class", "svelte-10t3lmq");
			add_location(img, file, 31, 6, 571);
			attr_dev(a, "href", a_href_value = "archive/#" + /*getId*/ ctx[1](/*src*/ ctx[3]));
			add_location(a, file, 33, 8, 629);
			add_location(figcaption, file, 32, 6, 608);
			add_location(figure, file, 30, 4, 556);
			attr_dev(div, "class", "card");
			attr_dev(div, "id", div_id_value = /*getId*/ ctx[1](/*src*/ ctx[3]));
			add_location(div, file, 29, 2, 517);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, figure);
			append_dev(figure, img);
			append_dev(figure, t0);
			append_dev(figure, figcaption);
			append_dev(figcaption, a);
			append_dev(a, t1);
			append_dev(div, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*photos*/ 1 && img.src !== (img_src_value = /*src*/ ctx[3])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*photos*/ 1 && a_href_value !== (a_href_value = "archive/#" + /*getId*/ ctx[1](/*src*/ ctx[3]))) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*photos*/ 1 && div_id_value !== (div_id_value = /*getId*/ ctx[1](/*src*/ ctx[3]))) {
				attr_dev(div, "id", div_id_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(29:0) {#each photos as src}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let each_1_anchor;
	let each_value = /*photos*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1y7z1p0\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			document.title = "fuchi";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*getId, photos*/ 3) {
				each_value = /*photos*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	const res = await this.fetch("blue.json");
	const media = await res.json();
	return { media };
}

function instance($$self, $$props, $$invalidate) {
	let { media } = $$props;

	const getId = path => {
		const segments = path.split("/");
		return segments[segments.length - 1].split(".")[0];
	};

	const writable_props = ["media"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);

	$$self.$set = $$props => {
		if ("media" in $$props) $$invalidate(2, media = $$props.media);
	};

	$$self.$capture_state = () => ({ preload, media, getId, photos });

	$$self.$inject_state = $$props => {
		if ("media" in $$props) $$invalidate(2, media = $$props.media);
		if ("photos" in $$props) $$invalidate(0, photos = $$props.photos);
	};

	let photos;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*media*/ 4) {
			 $$invalidate(0, photos = media.photos);
		}
	};

	return [photos, getId, media];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { media: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*media*/ ctx[2] === undefined && !("media" in props)) {
			console.warn("<Routes> was created without expected prop 'media'");
		}
	}

	get media() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set media(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Routes;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguOTIzMzBjYmYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxuICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlbG9hZChwYWdlLCBzZXNzaW9uKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5mZXRjaChcImJsdWUuanNvblwiKTtcbiAgICBjb25zdCBtZWRpYSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIHsgbWVkaWEgfTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG4gIGV4cG9ydCBsZXQgbWVkaWE7XG4gICQ6IHBob3RvcyA9IG1lZGlhLnBob3RvcztcblxuICBjb25zdCBnZXRJZCA9IHBhdGggPT4ge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gICAgcmV0dXJuIHNlZ21lbnRzW3NlZ21lbnRzLmxlbmd0aCAtIDFdLnNwbGl0KFwiLlwiKVswXTtcbiAgfTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIGltZyB7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICB9XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG4gIDx0aXRsZT5mdWNoaTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG57I2VhY2ggcGhvdG9zIGFzIHNyY31cbiAgPGRpdiBjbGFzcz1cImNhcmRcIiBpZD17Z2V0SWQoc3JjKX0+XG4gICAgPGZpZ3VyZT5cbiAgICAgIDxpbWcge3NyY30gYWx0PVwiYSBibHVlIHNreVwiIC8+XG4gICAgICA8ZmlnY2FwdGlvbj5cbiAgICAgICAgPGEgaHJlZj1cImFyY2hpdmUvI3tnZXRJZChzcmMpfVwiPi4uLjwvYT5cbiAgICAgIDwvZmlnY2FwdGlvbj5cbiAgICA8L2ZpZ3VyZT5cbiAgPC9kaXY+XG57L2VhY2h9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OERBaUMyQixHQUFLLFlBQUMsR0FBRzs7Ozs7Z0RBSlosR0FBSyxZQUFDLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3RkFJTixHQUFLLFlBQUMsR0FBRzs7OzswRUFKWixHQUFLLFlBQUMsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBRDFCLEdBQU07Ozs7Z0NBQVgsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBQUMsR0FBTTs7OzsrQkFBWCxNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29DQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBM0JrQixPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU87T0FDbkMsR0FBRyxTQUFTLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVztPQUNsQyxLQUFLLFNBQVMsR0FBRyxDQUFDLElBQUk7VUFDbkIsS0FBSzs7OztPQUtMLEtBQUs7O09BR1YsS0FBSyxHQUFHLElBQUk7UUFDVixRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHO1NBQ3hCLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBSmhELE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
